<UserControl x:Class="ScriptPlayer.Controls.PlaylistControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:ScriptPlayer.Controls"
             xmlns:converters="clr-namespace:ScriptPlayer.Converters"
             xmlns:shared="clr-namespace:ScriptPlayer.Shared;assembly=ScriptPlayer.Shared"
             xmlns:viewModels="clr-namespace:ScriptPlayer.ViewModels"
             xmlns:controls="clr-namespace:ScriptPlayer.Shared.Controls;assembly=ScriptPlayer.Shared"
             mc:Ignorable="d" Background="White" d:DesignHeight="435.699" d:DesignWidth="354.767" KeyDown="UserControl_KeyDown">
    <UserControl.Resources>
        <BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter"/>
        <ContextMenu x:Key="ItemContextMenu" shared:HideOnHover.OverridesHideOnHover="True">
            <MenuItem Header="Open in Explorer" Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.Tag.Playlist.OpenInExplorerCommand}"
                      CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.DataContext}"/>
            <Separator/>
            <MenuItem Header="Remove from playlist" Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.Tag.Playlist.RemoveSelectedEntryCommand}"></MenuItem>
            <MenuItem Header="Rename" Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.Tag.Playlist.RenameCommand}"
                      CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.DataContext}"></MenuItem>
            <MenuItem Header="Move" Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.Tag.Playlist.MoveCommand}"></MenuItem>
            <MenuItem Header="Move and remove from playlist" Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.Tag.Playlist.MoveAndRemoveCommand}"></MenuItem>
            <Separator/>
            <MenuItem Header="Delete (Recycle Bin)" Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.Tag.Playlist.RecycleCommand}"></MenuItem>
            <MenuItem Header="Delete (Permanently)" Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.Tag.Playlist.DeleteCommand}"></MenuItem>
        </ContextMenu>
        <ToolTip x:Key="EntryToolTip" Opened="ToolTip_OnOpened"
                 Padding="0" Placement="Right" BorderThickness="0">
            <local:VideoDetailsPreview />
        </ToolTip>
        <converters:DurationConverter x:Key="DurationConverter"/>
        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}">
            <Setter Property="Focusable" Value="False"/>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Opacity" Value="0.7"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Static ToolBar.CheckBoxStyleKey}}">
            <Setter Property="Focusable" Value="False"/>
        </Style>

        <Style TargetType="ListBoxItem" x:Key="TileItemStyle">
            <EventSetter Event="MouseDoubleClick" Handler="PlaylistEntry_DoubleClicked"/>
            <Setter Property="ToolTipService.BetweenShowDelay" Value="1000"/>
            <Setter Property="ToolTipService.ShowDuration" Value="60000"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"></Setter>
            <Setter Property="ContextMenu" Value="{StaticResource ItemContextMenu}"></Setter>
            <Setter Property="Tag" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:PlaylistControl}, Path=DataContext}"/>
            <Setter Property="ToolTip" Value="{StaticResource EntryToolTip}"/>
        </Style>

        <Style TargetType="ListBoxItem" x:Key="ListItemStyle">
            <EventSetter Event="MouseDoubleClick" Handler="PlaylistEntry_DoubleClicked"/>
            <Setter Property="ToolTipService.BetweenShowDelay" Value="1000"/>
            <Setter Property="ToolTipService.ShowDuration" Value="60000"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"></Setter>
            <Setter Property="ContextMenu" Value="{StaticResource ItemContextMenu}"></Setter>
            <Setter Property="Tag" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:PlaylistControl}, Path=DataContext}"/>
            <Setter Property="ToolTip" Value="{StaticResource EntryToolTip}"/>
        </Style>
    </UserControl.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="257*"/>
        </Grid.RowDefinitions>
        <Menu Grid.Row="0" Background="White" DataContext="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:PlaylistControl}, Path=ViewModel}">
            <MenuItem Header="Playlist">
                <MenuItem Header="Add Files (first)" Command="{Binding AddScriptsToPlaylistFirstCommand}" />
                <MenuItem Header="Add Files (last)" Command="{Binding AddScriptsToPlaylistCommand}" />
                <MenuItem Header="Add Folder (first)" Command="{Binding AddFolderToPlaylistFirstCommand}"/>
                <MenuItem Header="Add Folder (last)" Command="{Binding AddFolderToPlaylistCommand}"/>
                <Separator/>
                <MenuItem Header="Remove Missing Entries" Command="{Binding RemoveMissingEntriesFromPlaylistCommand}"/>
                <MenuItem Header="Remove Incomplete Entries" Command="{Binding RemoveIncompleteEntriesFromPlaylistCommand}"/>
                <MenuItem Header="Recheck All Entries" Command="{Binding Playlist.RecheckAllCommand}"/>
                <Separator/>
                <MenuItem Header="Scroll to current entry" Click="MnuScrollToCurrent"/>
                <Separator/>
                <MenuItem Header="Load Playlist" Command="{Binding LoadPlaylistCommand}"/>
                <MenuItem Header="Save Playlist" Command="{Binding SavePlaylistCommand}"/>
                <MenuItem Header="Clear Playlist" Command="{Binding Playlist.ClearPlaylistCommand}"/>
            </MenuItem>
            <MenuItem Header="Generate">
                <MenuItem Header ="(For selected files)" IsEnabled="False"/>
                <MenuItem Header="Generate Thumbnails" Command="{Binding Playlist.GenerateThumbnailsForSelectedVideosCommand}"></MenuItem>
                <MenuItem Header="Generate Thumbnail Banners" Command="{Binding Playlist.GenerateThumbnailBannersForSelectedVideosCommand}"></MenuItem>
                <MenuItem Header="Generate Previews" Command="{Binding Playlist.GeneratePreviewsForSelectedVideosCommand}"></MenuItem>
                <MenuItem Header="Generate Heatmaps" Command="{Binding Playlist.GenerateHeatmapsForSelectedVideosCommand}"></MenuItem>
                <MenuItem Header="Generate all" Command="{Binding Playlist.GenerateAllForSelectedVideosCommand}"></MenuItem>
                <Separator/>
                <MenuItem Header="Generate all missing files" Command="{Binding Playlist.GenerateAllForAllVideosCommand}"></MenuItem>
            </MenuItem>
            <MenuItem Header="Sort">
                <MenuItem Header="Duration (ascending)"  Command="{Binding Playlist.SortByDurationCommand}" CommandParameter="{shared:Boolean true}"/>
                <MenuItem Header="Duration (descending)"  Command="{Binding Playlist.SortByDurationCommand}" CommandParameter="{shared:Boolean false}"/>
                <Separator/>
                <MenuItem Header="Name (ascending)"  Command="{Binding Playlist.SortByNameCommand}" CommandParameter="{shared:Boolean true}"/>
                <MenuItem Header="Name (descending)"  Command="{Binding Playlist.SortByNameCommand}" CommandParameter="{shared:Boolean false}"/>
                <Separator/>
                <MenuItem Header="Path (ascending)"  Command="{Binding Playlist.SortByPathCommand}" CommandParameter="{shared:Boolean true}"/>
                <MenuItem Header="Path (descending)"  Command="{Binding Playlist.SortByPathCommand}" CommandParameter="{shared:Boolean false}"/>
                <Separator/>
                <MenuItem Header="Creation time (Media, ascending)"  Command="{Binding Playlist.SortByMediaCreationTime}" CommandParameter="{shared:Boolean true}"/>
                <MenuItem Header="Creation time (Media, descending)"  Command="{Binding Playlist.SortByMediaCreationTime}" CommandParameter="{shared:Boolean false}"/>
                <MenuItem Header="Creation time (Script, ascending)"  Command="{Binding Playlist.SortByScriptCreationTime}" CommandParameter="{shared:Boolean true}"/>
                <MenuItem Header="Creation time (Script, descending)"  Command="{Binding Playlist.SortByScriptCreationTime}" CommandParameter="{shared:Boolean false}"/>
                <Separator/>
                <MenuItem Header="Shuffle" Command="{Binding Playlist.SortShuffleCommand}"/>
            </MenuItem>
            <MenuItem Header="Style">
                <MenuItem Header="List" Command="{Binding Playlist.SetViewStyleCommand}" CommandParameter="{x:Static viewModels:PlaylistViewStyle.List}"></MenuItem>
                <MenuItem Header="Tiles" Command="{Binding Playlist.SetViewStyleCommand}" CommandParameter="{x:Static viewModels:PlaylistViewStyle.Tiles}"></MenuItem>
            </MenuItem>
        </Menu>

        <TextBox x:Name="txtSearch" Text="{Binding Path=Playlist.Filter, UpdateSourceTrigger=PropertyChanged}" Height="22" Margin="10,10,10,0" Grid.Row="1" TextWrapping="Wrap" VerticalAlignment="Top"/>

        <!-- The MaxHeight Binding resolves an unbelievably stupid perforamnce issue. Even though the Stackpanel that layouts the ListBoxItems is virtualized, every single Element is layouted (for the Height!) -->
        <ListBox MaxHeight="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Grid}}, Path=ActualHeight}" x:Name="lstEntries" Grid.Row="1" ScrollViewer.HorizontalScrollBarVisibility="Disabled" Margin="10,41,10,77" 
                 ItemsSource="{Binding Path=Playlist.FilteredEntries}" SelectedItem="{Binding Path=Playlist.SelectedEntry, Mode=TwoWay}" SelectionChanged="LstEntries_OnSelectionChanged" 
                 AllowDrop="True" Drop="ListBox_Drop" SelectionMode="Extended"
                 >
            <ListBox.Style>
                <Style TargetType="ListBox">
                    <EventSetter Event="MouseDoubleClick" Handler="PlaylistEntry_DoubleClicked"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Path=Playlist.ViewStyle}" Value="{x:Static viewModels:PlaylistViewStyle.List}">
                            <Setter Property="ItemContainerStyle" Value="{StaticResource ListItemStyle}"/>
                            <Setter Property="ItemTemplate">
                                <Setter.Value>

                                    <DataTemplate DataType="viewModels:PlaylistEntry">
                                        <DockPanel HorizontalAlignment="Stretch">
                                            <DockPanel.Style>
                                                <Style TargetType="FrameworkElement">
                                                    <Style.Setters>
                                                        <Setter Property="TextElement.Foreground" Value="DimGray"/>
                                                    </Style.Setters>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding Status}" Value="{x:Static viewModels:PlaylistEntryStatus.Loading}">
                                                            <Setter Property="TextElement.Foreground" Value="DimGray"/>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding Status}" Value="{x:Static viewModels:PlaylistEntryStatus.FilesOk}">
                                                            <Setter Property="TextElement.Foreground" Value="Black"/>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding Status}" Value="{x:Static viewModels:PlaylistEntryStatus.MissingFile}">
                                                            <Setter Property="TextElement.Foreground" Value="Red"/>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding Playing}" Value="True">
                                                            <Setter Property="TextElement.FontWeight" Value="Bold"></Setter>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </DockPanel.Style>
                                            <Grid Background="Black" DockPanel.Dock="Right" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="100" Visibility="{Binding Converter={StaticResource booleanToVisibilityConverter}, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:PlaylistControl}}, Path=ShowHeatmap}">
                                                <Image Source="{Binding HeatMap}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stretch="Fill"/>
                                            </Grid>
                                            <TextBlock Text="{Binding Path=Duration, Converter={StaticResource DurationConverter}}" DockPanel.Dock="Right" Margin="8,0,2,0" />
                                            <TextBlock Text="{Binding Shortname}" DockPanel.Dock="Left" TextTrimming="CharacterEllipsis"  Margin="2,0,0,0"/>
                                        </DockPanel>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Path=Playlist.ViewStyle}" Value="{x:Static viewModels:PlaylistViewStyle.Tiles}">
                            <Setter Property="ItemsPanel">
                                <Setter.Value>
                                    <ItemsPanelTemplate>
                                        <!--<local:VirtualizingWrapPanel ItemWidth="150" ItemHeight="121"/>-->
                                        <WrapPanel ItemWidth="150" ItemHeight="121"/>
                                    </ItemsPanelTemplate>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="ItemContainerStyle" Value="{StaticResource TileItemStyle}"/>
                            <Setter Property="ItemTemplate">
                                <Setter.Value>
                                    <DataTemplate DataType="viewModels:PlaylistEntry">
                                        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                            <Grid.Style>
                                                <Style TargetType="FrameworkElement">
                                                    <Style.Setters>
                                                        <Setter Property="TextElement.Foreground" Value="DimGray"/>
                                                    </Style.Setters>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding Status}" Value="{x:Static viewModels:PlaylistEntryStatus.Loading}">
                                                            <Setter Property="TextElement.Foreground" Value="DimGray"/>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding Status}" Value="{x:Static viewModels:PlaylistEntryStatus.FilesOk}">
                                                            <Setter Property="TextElement.Foreground" Value="Black"/>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding Status}" Value="{x:Static viewModels:PlaylistEntryStatus.MissingFile}">
                                                            <Setter Property="TextElement.Foreground" Value="Red"/>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding Playing}" Value="True">
                                                            <Setter Property="TextElement.FontWeight" Value="Bold"></Setter>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Grid.Style>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="*"/>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>

                                            <Grid Grid.Row="0" Grid.ColumnSpan="2"  Width="150" Height="85" Background="Black" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                                <Image RenderOptions.BitmapScalingMode="HighQuality" Stretch="Uniform" Source="{Binding Path=Preview}"></Image>
                                            </Grid>
                                            <Grid Grid.Row="1" Grid.ColumnSpan="2" Grid.Column="0" Background="Black" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Height="16">
                                                <Image Source="{Binding HeatMap}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stretch="Fill"/>
                                            </Grid>
                                            <TextBlock Grid.Row="2" Grid.Column="0" Text="{Binding Shortname}" TextTrimming="CharacterEllipsis" />
                                            <TextBlock Grid.Row="2" Grid.Column="1" Text="{Binding Path=Duration, Converter={StaticResource DurationConverter}}" />
                                        </Grid>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ListBox.Style>
        </ListBox>

        <TextBlock Grid.Row="1" Grid.Column="0" Margin="10,0,10,37" Height="35" VerticalAlignment="Bottom">
            <Run Text="Playlist: "/>
            <Run Text="{Binding Mode=OneWay, Path=Playlist.Entries.Count}"/>
            <Run Text="entries ["/>
            <Run Text="{Binding Mode=OneWay, Path=Playlist.TotalDurationString}"/>
            <Run Text="]"/>
            <LineBreak/>
            <Run Text="Selection: "/>
            <Run Text="{Binding Mode=OneWay, Path=Playlist.SelectedEntries.Count}"/>
            <Run Text="entries ["/>
            <Run Text="{Binding Mode=OneWay, Path=Playlist.SelectedDurationString}"/>
            <Run Text="]"/>
        </TextBlock>

        <UniformGrid Margin="10,0,10,10" Height="27" VerticalAlignment="Bottom" Grid.Row="1" Columns="9">
            <Button ToolTip="Move First" Command="{Binding Playlist.MoveSelectedEntryFirstCommand}" 
                    HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <controls:AwesomeIcon Icon="Arrow_Circle_Up_Solid"/>
            </Button>
            <Button ToolTip="Move Up" Command="{Binding Playlist.MoveSelectedEntryUpCommand}" 
                    HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <controls:AwesomeIcon Icon="Arrowup_Solid"/>
            </Button>
            <Button ToolTip="Move Down" Command="{Binding Playlist.MoveSelectedEntryDownCommand}"
                    HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <controls:AwesomeIcon Icon="Arrowdown_Solid"/>
            </Button>
            <Button ToolTip="Move Last" Command="{Binding Playlist.MoveSelectedEntryLastCommand}"
                    HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <controls:AwesomeIcon Icon="Arrow_Circle_Down_Solid"/>
            </Button>
            <Button ToolTip="Remove" Command="{Binding Playlist.RemoveSelectedEntryCommand}" 
                    HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <controls:AwesomeIcon Icon="Times_Solid"/>
            </Button>
            <CheckBox ToolTip="Shuffle" IsChecked="{Binding Playlist.Shuffle}"
                      HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <controls:AwesomeIcon Icon="Random_Solid"/>
            </CheckBox>
            <CheckBox ToolTip="Repeat" IsChecked="{Binding Playlist.Repeat}" 
                      HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <controls:AwesomeIcon Icon="Redo_Solid"/>
            </CheckBox>
            <CheckBox ToolTip="Repeat Single File" IsChecked="{Binding Playlist.RepeatSingleFile}" 
                      HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <controls:AwesomeIcon Icon="Redo_Solid"/>
            </CheckBox>
            <CheckBox ToolTip="Random Chapters" IsChecked="{Binding Playlist.RandomChapters}" 
                      HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <controls:AwesomeIcon Icon="Bookmark_Solid"/>
            </CheckBox>
        </UniformGrid>
    </Grid>
</UserControl>
