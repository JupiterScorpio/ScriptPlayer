<Window x:Class="ScriptPlayer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:shared="clr-namespace:ScriptPlayer.Shared;assembly=ScriptPlayer.Shared"
        xmlns:converters="clr-namespace:ScriptPlayer.Shared.Converters;assembly=ScriptPlayer.Shared"
        xmlns:converters1="clr-namespace:ScriptPlayer.Converters"
        xmlns:scriptPlayer="clr-namespace:ScriptPlayer"
        xmlns:viewModels="clr-namespace:ScriptPlayer.ViewModels"
        xmlns:controls="clr-namespace:ScriptPlayer.Shared.Controls;assembly=ScriptPlayer.Shared"
        xmlns:controls1="clr-namespace:ScriptPlayer.Controls"
        mc:Ignorable="d" PreviewKeyDown="MainWindow_OnPreviewKeyDown" Closing="MainWindow_OnClosing"
        DataContext="{Binding RelativeSource={RelativeSource Self}, Path=ViewModel}"
        Topmost="{Binding Settings.StayOnTop}"
        viewModels:SettingsPage.Handler="SettingsPage_Handler"
        d:DesignHeight="591" d:DesignWidth="954" Loaded="Window_Loaded" Icon="ScriptPlayerIcon.ico" Closed="MainWindow_OnClosed">
    <Window.Style>
        <Style TargetType="Window">
            <Setter Property="Title" Value="{Binding Path=Title, StringFormat={}ScriptPlayer - {0}}"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=Title}" Value="">
                    <Setter Property="Title" Value="ScriptPlayer"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </Window.Style>
    <Window.Resources>
        <Style x:Key="LeftScrollViewer" TargetType="{x:Type ScrollViewer}">
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>

                            <ScrollContentPresenter Grid.Column="1"/>

                            <ScrollBar Name="PART_VerticalScrollBar"
                                       Value="{TemplateBinding VerticalOffset}"
                                       Maximum="{TemplateBinding ScrollableHeight}"
                                       ViewportSize="{TemplateBinding ViewportHeight}"
                                       Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                            <ScrollBar Name="PART_HorizontalScrollBar"
                                       Orientation="Horizontal"
                                       Grid.Row="1"
                                       Grid.Column="1"
                                       Value="{TemplateBinding HorizontalOffset}"
                                       Maximum="{TemplateBinding ScrollableWidth}"
                                       ViewportSize="{TemplateBinding ViewportWidth}"
                                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>

                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <converters1:TimeLeftConverter x:Key="TimeLeftConverter"/>
        <converters:ConversionModeToNameConverter x:Key="ConversionConverter"/>
        <converters1:DistinctValueToBooleanConverter x:Key="BooleanConverter"/>
        <converters1:TimeSpanToMillisecondsConverter x:Key="MillisecondsConverter"/>
        <converters:BooleanInverter x:Key="Inverter"/>
        <converters1:EqualsConverter x:Key="EqualsConverter"/>
        <BooleanToVisibilityConverter x:Key="VisibilityConverter"/>

        <!-- Used in code -->
        <!-- ReSharper disable Xaml.RedundantResource -->
        <DataTemplate x:Key="SkipButton">
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="Skip" Margin="0,0,8,0" VerticalAlignment="Center"/>
                <TextBlock FontFamily="Webdings" Text="8" VerticalAlignment="Center"/>
            </StackPanel>
        </DataTemplate>
        <DataTemplate x:Key="SkipNextButton">
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="Next" Margin="0,0,8,0" VerticalAlignment="Center"/>
                <TextBlock FontFamily="Webdings" Text=":" VerticalAlignment="Center"/>
            </StackPanel>
        </DataTemplate>
        <!-- ReSharper restore Xaml.RedundantResource -->
    </Window.Resources>
    <Grid Background="Transparent">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <Grid Name="GridVideo" Grid.Row="1" Grid.ColumnSpan="3"
              Background="Black" MouseDown="VideoPlayer_OnMouseDown" AllowDrop="True" Drop="GridVideo_Drop">
            <!-- VIDEO PLAYER -->
            <shared:VideoPlayer Volume="{Binding Volume}" HideMouse="true" x:Name="VideoPlayer">
                <shared:VideoPlayer.Style>
                    <Style TargetType="{x:Type shared:VideoPlayer}">
                        <Setter Property="Visibility" Value="Hidden"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding PlaybackMode}" Value="{x:Static viewModels:PlaybackMode.Local}">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding BlurVideo}" Value="true">
                                <Setter Property="Effect">
                                    <Setter.Value>
                                        <BlurEffect RenderingBias="Performance" KernelType="Gaussian" Radius="100"/>
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </shared:VideoPlayer.Style>
            </shared:VideoPlayer>
            <scriptPlayer:FlashOverlay HorizontalAlignment="Stretch" VerticalAlignment="Stretch" x:Name="FlashOverlay"/>

            <!-- BLIND MODE -->
            <Grid IsHitTestVisible="False">
                <Grid.Style>
                    <Style TargetType="{x:Type Grid}">
                        <Setter Property="Visibility" Value="Hidden"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding PlaybackMode}" Value="{x:Static viewModels:PlaybackMode.Blind}">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>
                <TextBlock Text="Blind Mode" Foreground="White" FontSize="50" HorizontalAlignment="Center" VerticalAlignment="Center"/>
            </Grid>

            <!-- External Players -->
            <Grid IsHitTestVisible="False">
                <Grid.Style>
                    <Style TargetType="{x:Type Grid}">
                        <Setter Property="Visibility" Value="Hidden"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding TimeSource.ShowBanner}" Value="true">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>
                <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                    <TextBlock Text="{Binding TimeSource.Name}" Foreground="White" FontSize="50" HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center"/>
                    <TextBlock Foreground="White" FontSize="20" HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center">
                        <TextBlock.Style>
                            <Style TargetType="{x:Type TextBlock}">
                                <Setter Property="Text" Value="{Binding TimeSource.ConnectInstructions}"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding TimeSource.IsConnected}" Value="true">
                                        <Setter Property="Text" Value="Connected"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </StackPanel>
            </Grid>

            <!-- ICON AND VERSION -->
            <Grid IsHitTestVisible="False" Visibility="{Binding ShowBanner, Converter={StaticResource VisibilityConverter}}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="3*"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="3*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Viewbox StretchDirection="DownOnly" Grid.Column="1"  Grid.Row="1">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <Image Width="512" Height="512" Source="Images/ScriptPlayerIcon.png"/>

                        <TextBlock Foreground="White" Grid.Row="1" Text="{Binding Path=Version.VersionText}" FontSize="40" FontWeight="DemiBold" TextAlignment="Center" HorizontalAlignment="Stretch">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Settings.CheckForNewVersionOnStartup}" Value="False">
                                            <Setter Property="Visibility" Value="Hidden"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>

                        <TextBlock Foreground="White" Grid.Row="2" Text="Check Help / About for details" FontSize="40" FontWeight="DemiBold" TextAlignment="Center" HorizontalAlignment="Stretch">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Version.CanDownload}" Value="False">
                                            <Setter Property="Visibility" Value="Hidden"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>

                        <TextBlock Foreground="White" Grid.Row="1" Text="{Binding Path=Version.InstalledVersion, StringFormat={}ScriptPlayer {0}}" FontSize="40" FontWeight="DemiBold" TextAlignment="Center" HorizontalAlignment="Stretch">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Settings.CheckForNewVersionOnStartup}" Value="True">
                                            <Setter Property="Visibility" Value="Hidden"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </Grid>
                </Viewbox>
            </Grid>
            
            <!-- SUBTITLES -->
            <Grid>
                <shared:SubtitleDisplay TimeSource="{Binding TimeSource}" Name="subtitleDisplay" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"></shared:SubtitleDisplay>
            </Grid>

            <!-- SCRIPT POSITIONS -->
            <ProgressBar Visibility="{Binding Settings.ShowScriptPositions, Converter={StaticResource VisibilityConverter}}" Minimum="0" Maximum="1" Value="{Binding CurrentPosition}" Orientation="Vertical" HorizontalAlignment="Left" Margin="10,10,0,10" Width="32">
                <ProgressBar.Style>
                    <Style TargetType="{x:Type ProgressBar}">
                        <Setter Property="Foreground" Value="Lime"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ElementName=VideoPlayer, Path=IsSeeking}" Value="{x:Static viewModels:StaticBoolean.True}">
                                <Setter Property="Foreground" Value="Red"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ProgressBar.Style>
            </ProgressBar>

            <Grid Background="#E0000000" IsHitTestVisible="False" Visibility="{Binding Settings.ShowScriptPositions, Converter={StaticResource VisibilityConverter}}" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Height="65">
                <shared:TimeLineHeader ClipToBounds="True" Background="Transparent" ViewPort="{Binding PositionsViewport, Mode=TwoWay}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Marker="{Binding Path=TimeSource.Progress, Mode=OneWay}"></shared:TimeLineHeader>
                <shared:PositionBar ClipToBounds="True" TotalDisplayedDuration="{Binding PositionsViewport, Mode=OneWay}" MinCommandDelay="{Binding Settings.CommandDelay}" IsReadOnly="True" Positions="{Binding Positions}" Progress="{Binding Path=TimeSource.Progress}"/>
            </Grid>

            <!-- NOTIFICATIONS -->
            <shared:NotificationList x:Name="Notifications" Margin="10" Loaded="Notifications_Loaded">
                <shared:NotificationList.Resources>
                    <DataTemplate DataType="{x:Type shared:NotificationCommand}">
                        <Button Command="{Binding Command}" Margin="0,0,0,8" Padding="8,0,8,4" SnapsToDevicePixels="True" Background="#FF3E4587" 
                                TextElement.Foreground="White" TextElement.FontSize="20"
                                BorderThickness="1" BorderBrush="LightGray" HorizontalAlignment="Left" VerticalAlignment="Top" Content="{Binding Content}">
                        </Button>
                    </DataTemplate>
                    <DataTemplate DataType="{x:Type shared:Notification}">
                        <Border Margin="0,0,0,8" Padding="8,0,8,4" SnapsToDevicePixels="True" Background="DimGray" BorderThickness="1" BorderBrush="LightGray" 
                                HorizontalAlignment="Left" VerticalAlignment="Top">

                            <Border.Resources>
                                <Style TargetType="{x:Type ContentControl}">
                                    <Setter Property="TextElement.FontSize" Value="20"/>
                                    <Setter Property="TextElement.Foreground" Value="White"/>
                                    <Setter Property="HorizontalAlignment" Value="Left"/>
                                </Style>
                            </Border.Resources>
                            <ContentControl Content="{Binding Content}"/>
                        </Border>
                    </DataTemplate>
                </shared:NotificationList.Resources>
            </shared:NotificationList>
        </Grid>

        <!-- MAIN MENU -->

        <Grid Name="MnuMain" Grid.Row="0" Grid.ColumnSpan="3" Grid.Column="0" Background="#FFF0F0F0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Menu Grid.Row="0">
                <MenuItem Header="File">
                    <MenuItem Header="Open video" Command="{Binding OpenVideoCommand}"/>
                    <MenuItem Header="Open script" Command="{Binding OpenScriptCommand}"/>
                    <Separator/>
                    <MenuItem Header="Show loaded files" Click="BtnShowLoadedFiles_Click"/>
                    <Separator/>
                    <MenuItem Header="Add file to playlist" Command="{Binding AddScriptsToPlaylistCommand}"/>
                    <MenuItem Header="Add folder to Playlist" Command="{Binding AddFolderToPlaylistCommand}"/>
                    <MenuItem Header="Show playlist" Click="mnuShowPlaylist_Click"/>
                </MenuItem>
                <MenuItem Header="Devices">
                    <MenuItem Header="Show devices" Command="{Binding ShowDeviceManagerCommand}"/>
                    <Separator/>
                    <MenuItem Header="Connect to Handy directly" Command="{Binding ConnectHandyDirectlyCommand}" ToolTipService.ShowOnDisabled="True"/>
                    <!--<MenuItem Command="{Binding ConnectLaunchDirectlyCommand}" IsEnabled="{Binding CanDirectConnectLaunch}" ToolTipService.ShowOnDisabled="True">
                        <MenuItem.Header>
                            <TextBlock Text="Connect Launch directly">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Style.Triggers>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter Property="Foreground" Value="DarkGray"></Setter>
                                                <Setter Property="TextDecorations" Value="{x:Static TextDecorations.Strikethrough}"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </MenuItem.Header>
                        <MenuItem.Style>
                            <Style TargetType="MenuItem">
                                <Style.Triggers>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="ToolTip" Value="This feature requires Win10 15063 or higher"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </MenuItem.Style>
                    </MenuItem>-->
                    <MenuItem Header="Add e-stim audio device (experimental)" Command="{Binding AddEstimAudioCommand}">
                    </MenuItem>
                    <MenuItem Header="Add funstim audio device" Command="{Binding AddFunstimAudioCommand}">
                    </MenuItem>
                    <MenuItem Header="Buttplug / Intiface">
                        <!--<MenuItem.Header>
                            <TextBlock>
                            <Run Text="Buttplug "/>
                            <Run Text="{Binding ButtplugApiVersion}"/>
                            </TextBlock>
                        </MenuItem.Header>-->
                        <MenuItem Header="Download" Click="MnuDownloadButtplug_Click"/>
                        <Separator/>
                        <MenuItem Header="Connect" Command="{Binding ConnectButtplugCommand}"/>
                        <MenuItem Header="Disconnect" Command="{Binding DisconnectButtplugCommand}"/>
                        <MenuItem Header="Scan for devices" Command="{Binding StartScanningButtplugCommand}"/>
                    </MenuItem>
                    <MenuItem Header="Add MK312 Wifi Device" Command="{Binding AddMK312WifiCommand}">
                    </MenuItem>
                    <MenuItem Header="Add MK312 Serial Device" Command="{Binding AddMK312SerialCommand}">
                    </MenuItem>
                </MenuItem>
                <MenuItem Header="Video Player">
                    <MenuItem Header="Local" IsCheckable="True" IsChecked="{Binding Path=PlaybackMode, Mode=TwoWay, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PlaybackMode.Local}}"/>
                    <MenuItem Header="None (Script Only)" IsCheckable="True" IsChecked="{Binding Path=PlaybackMode, Mode=TwoWay, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PlaybackMode.Blind}}"/>
                    <Separator/>
                    <MenuItem Header="HereSphere" IsCheckable="True" IsChecked="{Binding Path=PlaybackMode, Mode=TwoWay, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PlaybackMode.DeoVr}}"/>
                    <MenuItem Header="MPC-HC" IsCheckable="True" IsChecked="{Binding Path=PlaybackMode, Mode=TwoWay, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PlaybackMode.MpcHc}}"/>
                    <MenuItem Header="Samsung VR" IsCheckable="True" IsChecked="{Binding Path=PlaybackMode, Mode=TwoWay, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PlaybackMode.SamsungVr}}"/>
                    <MenuItem Header="VLC" IsCheckable="True" IsChecked="{Binding Path=PlaybackMode, Mode=TwoWay, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PlaybackMode.Vlc}}"/>
                    <MenuItem Header="Whirligig" IsCheckable="True" IsChecked="{Binding Path=PlaybackMode, Mode=TwoWay, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PlaybackMode.Whirligig}}"/>
                    <MenuItem Header="Zoom Player" IsCheckable="True" IsChecked="{Binding Path=PlaybackMode, Mode=TwoWay, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PlaybackMode.ZoomPlayer}}"/>
                    <MenuItem Header="Kodi" IsCheckable="True" IsChecked="{Binding Path=PlaybackMode, Mode=TwoWay, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PlaybackMode.Kodi}}"/>
                    <MenuItem Header="GoPro VR Player" IsCheckable="True" IsChecked="{Binding Path=PlaybackMode, Mode=TwoWay, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PlaybackMode.GoProVrPlayer}}"/>
                </MenuItem>
                <MenuItem Header="Script">
                    <MenuItem Header="Shift" Command="{Binding ShiftScriptCommand}"/>
                    <MenuItem Header="Trim" Command="{Binding TrimScriptCommand}"/>
                    <Separator/>
                    <MenuItem Header="Edit Meta-Data" Command="{Binding EditMetadataCommand}"/>
                    <MenuItem Header="Save as" Command="{Binding SaveScriptAsCommand}"/>
                    <MenuItem Header="Export as Handy CSV" Command="{Binding ExportHandyCsvCommand}"/>
                </MenuItem>
                <MenuItem Header="Selection">
                    <MenuItem Header="Set A" Command="{Binding SetLoopACommand}"/>
                    <MenuItem Header="Set B" Command="{Binding SetLoopBCommand}"/>
                    <MenuItem Header="Clear" Command="{Binding ClearLoopCommand}"/>
                    <Separator />
                    <MenuItem Header="Loop" IsChecked="{Binding LoopSelection}" IsCheckable="True"/>
                </MenuItem>
                <MenuItem Header="Generate">
                    <MenuItem Header="Thumbnails" Command="{Binding GenerateThumbnailsForLoadedVideoCommand}"/>
                    <MenuItem Header="Thumbnail banner" Command="{Binding GenerateThumbnailBannerForLoadedVideoCommand}"/>
                    <MenuItem Header="Preview GIF" Command="{Binding GeneratePreviewForLoadedVideoCommand}"/>
                    <MenuItem Header="Heatmap" Command="{Binding GenerateHeatmapForLoadedVideoCommand}"/>
                    <MenuItem Header="All" Command="{Binding GenerateAllForLoadedVideoCommand}"/>
                    <Separator/>
                    <MenuItem Header="Show progress" Command="{Binding ShowGeneratorProgressCommand}"/>
                    <MenuItem Header="Settings" Command="{Binding ShowGeneratorSettingsCommand}"/>
                </MenuItem>
                <MenuItem Header="View">
                    <MenuItem Header="Toggle fullscreen" Command="{Binding ToggleFullScreenCommand}"/>
                    <MenuItem Header="Stay on top" IsCheckable="True" IsChecked="{Binding Path=Settings.StayOnTop, Mode=TwoWay}"/>
                    <Separator/>
                    <MenuItem Header="Compact Controls" Click="BtnCompactControls_Click"/>
                </MenuItem>
                <MenuItem Header="Settings" Command="{Binding ShowSettingsCommand}">
                </MenuItem>
                <MenuItem Header="Help">
                    <MenuItem Header="Documentation (Online)" Click="mnuDocs_Click"/>
                    <MenuItem Header="Attributions" Click="mnuAttributions_Click"/>
                    <Separator/>
                    <MenuItem Header="About / Check for new version" Click="mnuVersion_Click"/>
                </MenuItem>
            </Menu>
            <Grid Grid.Row="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <ToolBar Grid.Column="0" Background="#FFF0F0F0">
                    <!--<DockPanel Width="{Binding Path=ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type ToolBarPanel}}}">
                    <DockPanel.Resources>
                        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"/>
                        <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Static ToolBar.CheckBoxStyleKey}}"/>
                    </DockPanel.Resources>-->
                    <Button Command="{Binding OpenVideoCommand}">
                        <Grid Width="30" Height="30">
                            <controls:AwesomeIcon Padding="3" Icon="Folder_Open_Regular"/>
                        </Grid>
                    </Button>
                    <Button Command="{Binding AddScriptsToPlaylistCommand}">
                        <Grid Width="30" Height="30">
                            <controls:AwesomeIcon Padding="3" Icon="Plus_Solid"/>
                        </Grid>
                    </Button>
                    <Button Click="mnuShowPlaylist_Click">
                        <Grid Width="30" Height="30">
                            <controls:AwesomeIcon Padding="3" Icon="List_Solid"/>
                        </Grid>
                    </Button>
                    <CheckBox ToolTip="Shuffle" IsChecked="{Binding Playlist.Shuffle}"
                              HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <Grid Width="30" Height="30">
                            <controls:AwesomeIcon Padding="3" Icon="Random_Solid"/>
                        </Grid>
                    </CheckBox>
                    <CheckBox ToolTip="Repeat" IsChecked="{Binding Playlist.Repeat}" 
                              HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <Grid Width="30" Height="30">
                            <controls:AwesomeIcon Padding="3" Icon="Redo_Solid"/>
                        </Grid>
                    </CheckBox>
                    <CheckBox ToolTip="Repeat Single File" IsChecked="{Binding Playlist.RepeatSingleFile}" 
                              HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <Grid Width="30" Height="30">
                            <controls:AwesomeIcon Padding="3" Icon="Redo_Solid"/>
                        </Grid>
                    </CheckBox>
                    <CheckBox ToolTip="{Binding RandomChapterToolTip}" IsChecked="{Binding Playlist.RandomChapters}" 
                              viewModels:SettingsPage.PageName="Chapter Settings"
                              HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <Grid Width="30" Height="30">
                            <controls:AwesomeIcon Padding="3" Icon="Bookmark_Solid"/>
                        </Grid>
                    </CheckBox>
                    <!--</DockPanel>-->
                </ToolBar>
                <CheckBox Grid.Column="1" Padding="0" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" VerticalAlignment="Stretch" Focusable="False" Style="{StaticResource {x:Static ToolBar.CheckBoxStyleKey}}" Width="30" HorizontalAlignment="Stretch"
                          IsChecked="{Binding ElementName=MnuMain, Path=(shared:HideOnHover.IsActive), Mode=TwoWay, Converter={StaticResource Inverter}}">
                    <TextBlock Text="🖈" Padding="0" Margin="0" FontSize="18"/>
                </CheckBox>
                <Button Grid.Column="2" DockPanel.Dock="Right" Command="{Binding ShowGeneratorProgressCommand}" 
                        HorizontalAlignment="Right" VerticalAlignment="Stretch">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}">
                            <Setter Property="Foreground" Value="LimeGreen"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding WorkQueue.IsDone}" Value="True">
                                    <Setter Property="Foreground" Value="DodgerBlue"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding WorkQueue.IsEmpty}" Value="True">
                                    <Setter Property="Foreground" Value="Gray"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                    <Grid Width="30" Height="30">
                        <controls:AwesomeIcon Icon="Video_File_Regular" Focusable="False" Height="20" HorizontalAlignment="Center" VerticalAlignment="Center"/>

                        <ProgressBar Minimum="0" Maximum="1" Height="3" HorizontalAlignment="Stretch" VerticalAlignment="Bottom"
                                     Value="{Binding WorkQueue.TotalProgress}" BorderThickness="0" Foreground="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}, Path=Foreground}">
                        </ProgressBar>
                    </Grid>
                </Button>
            </Grid>
        </Grid>

        <DockPanel Background="White" LastChildFill="True" Name="PlayerControls" 
                   Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="3">
            <DockPanel.Resources>
                <Style TargetType="Button" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" x:Key="FlatButton">
                    <Setter Property="FontFamily" Value="Webdings"/>
                    <Setter Property="FontSize" Value="20"/>
                    <Setter Property="Width" Value="30"/>
                    <Setter Property="Height" Value="30"/>
                    <Setter Property="DockPanel.Dock" Value="Left"></Setter>
                </Style>
                <Style TargetType="Button" BasedOn="{StaticResource FlatButton}" x:Key="MediaControlButton">
                    <Setter Property="Focusable" Value="False"></Setter>
                </Style>
                <Style TargetType="Separator" BasedOn="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}">
                    <Setter Property="Margin" Value="4"/>
                </Style>
            </DockPanel.Resources>
            <Button ToolTip="Play / Pause" Command="{Binding TogglePlaybackCommand}">
                <Button.Style>
                    <Style TargetType="Button" BasedOn="{StaticResource MediaControlButton}">
                        <Setter Property="Content" Value="4"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=TimeSource.IsPlaying}" Value="True">
                                <Setter Property="Content" Value=";"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
            <Button 
                Style="{StaticResource MediaControlButton}"
                Command="{Binding SkipToNextEventCommand}" ToolTip="Skip close to next event" viewModels:SettingsPage.PageName="Gaps" Content="8"/>

            <Button Command="{Binding ToggleFullScreenCommand}" ToolTip="Toggle Fullscreen" DockPanel.Dock="Right" Style="{StaticResource MediaControlButton}">
                <controls:AwesomeIcon>
                    <controls:AwesomeIcon.Style>
                        <Style TargetType="{x:Type controls:AwesomeIcon}">
                            <Setter Property="Icon" Value="{x:Static shared:AwesomePath.Expand_Solid}"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsFullscreen}" Value="True">
                                    <Setter Property="Icon" Value="{x:Static shared:AwesomePath.Compress_Solid}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </controls:AwesomeIcon.Style>
                </controls:AwesomeIcon>
            </Button>
            <CheckBox DockPanel.Dock="Right" Padding="0" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" VerticalAlignment="Stretch" Focusable="False" Style="{StaticResource {x:Static ToolBar.CheckBoxStyleKey}}" Width="30" Height="30" HorizontalAlignment="Stretch"
                      IsChecked="{Binding ElementName=PlayerControls, Path=(shared:HideOnHover.IsActive), Mode=TwoWay, Converter={StaticResource Inverter}}">
                <TextBlock Text="🖈" Padding="0" Margin="0" FontSize="18"/>
            </CheckBox>
            <TextBlock MouseLeftButtonDown="TimeDisplay_OnMouseLeftButtonDown" TextAlignment="Right" DockPanel.Dock="Right" VerticalAlignment="Center" Width="95" Margin="0,0,8,0">
                <TextBlock.ContextMenu>
                    <ContextMenu shared:HideOnHover.OverridesHideOnHover="True">
                        <ContextMenu.Resources>
                            <Style x:Key="DisplayModeCommand" TargetType="MenuItem">
                                <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}, Path=PlacementTarget.(FrameworkElement.DataContext).(viewModels:MainViewModel.SetTimeDisplayModeCommand)}"/>
                                <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Self}, Path=Tag}"></Setter>
                                <Setter Property="IsChecked">
                                    <Setter.Value>
                                        <MultiBinding Converter="{StaticResource EqualsConverter}">
                                            <Binding RelativeSource="{RelativeSource Self}" Path="Tag"/>
                                            <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}" Path="PlacementTarget.(FrameworkElement.DataContext).(viewModels:MainViewModel.Settings).TimeDisplayMode"/>
                                        </MultiBinding>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                            <Style x:Key="TimeLeftCommand" TargetType="MenuItem">
                                <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}, Path=PlacementTarget.(FrameworkElement.DataContext).(viewModels:MainViewModel.SetShowTimeLeftCommand)}"/>
                                <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Self}, Path=Tag}"></Setter>
                                <Setter Property="IsChecked">
                                    <Setter.Value>
                                        <MultiBinding Converter="{StaticResource EqualsConverter}">
                                            <Binding RelativeSource="{RelativeSource Self}" Path="Tag"/>
                                            <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}" Path="PlacementTarget.(FrameworkElement.DataContext).(viewModels:MainViewModel.Settings).ShowTimeLeft"/>
                                        </MultiBinding>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ContextMenu.Resources>
                        <MenuItem Header="Media Progress" Tag="{x:Static viewModels:TimeDisplayMode.Original}" Style="{StaticResource DisplayModeCommand}"/>
                        <MenuItem Header="Content and Gaps" Tag="{x:Static viewModels:TimeDisplayMode.ContentAndGaps}" Style="{StaticResource DisplayModeCommand}"/>
                        <MenuItem Header="Content Only" Tag="{x:Static viewModels:TimeDisplayMode.ContentOnly}" Style="{StaticResource DisplayModeCommand}"/>
                        <Separator/>
                        <MenuItem Header="Time elapsed" Tag="{x:Static viewModels:StaticBoolean.False}" Style="{StaticResource TimeLeftCommand}"/>
                        <MenuItem Header="Time remaining" Tag="{x:Static viewModels:StaticBoolean.True}" Style="{StaticResource TimeLeftCommand}"/>
                        <Separator/>
                        <MenuItem Header="Limit to selection" IsCheckable="True" IsChecked="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}, Path=PlacementTarget.(FrameworkElement.DataContext).(viewModels:MainViewModel.Settings).LimitDisplayedTimeToSelection}"/>
                    </ContextMenu>
                </TextBlock.ContextMenu>
                <TextBlock.Style>
                    <Style TargetType="TextBlock">
                        <Setter Property="Text">
                            <Setter.Value>
                                <MultiBinding StringFormat="{}{0:h\:mm\:ss} / {1:h\:mm\:ss}">
                                    <Binding Path="DisplayedProgress"/>
                                    <Binding Path="DisplayedDuration"/>
                                </MultiBinding>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Settings.ShowTimeLeft}" Value="True">
                                <Setter Property="Text">
                                    <Setter.Value>
                                        <MultiBinding Converter="{StaticResource TimeLeftConverter}">
                                            <Binding Path="DisplayedProgress"/>
                                            <Binding Path="DisplayedDuration"/>
                                        </MultiBinding>
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
            </TextBlock>
            <Slider VerticalAlignment="Center" Margin="16,0" Width="50" Value="{Binding Volume, Mode=TwoWay}" Minimum="0" Maximum="100" DockPanel.Dock="Right" Style="{DynamicResource VolumeSliderStyle}"></Slider>
            <Button Style="{StaticResource MediaControlButton}"
                Command="{Binding Playlist.PlayNextEntryCommand}" Content=":" DockPanel.Dock="Right"
                    ToolTipService.Placement="Top"
                    ToolTipService.BetweenShowDelay="0" ToolTipService.ShowDuration="60000" MouseRightButtonUp="btnNext_MouseRightButtonUp">
                <controls:BetterToolTip.ToolTip>
                    <controls1:VideoDetailsPreview ViewModel="{Binding .}" Entry="{Binding Path=(viewModels:MainViewModel.Playlist).NextEntry}"/>
                </controls:BetterToolTip.ToolTip>
                <!-- <ToolTip DataContext="{Binding RelativeSource={RelativeSource Self}, Path=PlacementTarget.(FrameworkElement.DataContext)}" 
                             Padding="0" Placement="Top" BorderThickness="0">
                        <controls1:VideoDetailsPreview ViewModel="{Binding .}" Entry="{Binding Path=(viewModels:MainViewModel.Playlist).NextEntry}"/>
                    </ToolTip>
                -->
            </Button>
            <Button Style="{StaticResource MediaControlButton}"
                Command="{Binding Playlist.PlayPreviousEntryCommand}" Content="9" DockPanel.Dock="Right"
                    ToolTipService.Placement="Top"
                    ToolTipService.BetweenShowDelay="0" ToolTipService.ShowDuration="60000">
                <controls:BetterToolTip.ToolTip>
                    <controls1:VideoDetailsPreview ViewModel="{Binding .}" Entry="{Binding Path=(viewModels:MainViewModel.Playlist).PreviousEntry}"/>
                </controls:BetterToolTip.ToolTip>
            </Button>
            <shared:SeekBar Positions="{Binding Positions}" HighlightRange="{Binding DisplayedRange}" SnapsToDevicePixels="True" Margin="4" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Name="SeekBar" Thumbnails="{Binding Thumbnails}" Progress="{Binding Path=TimeSource.Progress}" Duration="{Binding Path=TimeSource.Duration}" Seek="SeekBar_OnSeek">
                <shared:SeekBar.OverlayOpacity>
                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                        <GradientStop Offset="0" Color="#20000000"/>
                        <GradientStop Offset="0.98" Color="#cc000000"/>
                        <GradientStop Offset="0.98" Color="#50000000"/>
                        <GradientStop Offset="1" Color="#50000000"/>
                    </LinearGradientBrush>
                </shared:SeekBar.OverlayOpacity>
                <shared:SeekBar.Style>
                    <Style TargetType="{x:Type shared:SeekBar}">
                        <Setter Property="Overlay" Value="Transparent"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Settings.ShowHeatMap}" Value="True">
                                <Setter Property="Overlay" Value="{Binding HeatMap}"/>
                                <Setter Property="OverlayGeometry" Value="{Binding HeatMapBounds}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </shared:SeekBar.Style>
            </shared:SeekBar>
        </DockPanel>

        <Grid Name="GridPlaylist" Width="Auto" shared:HideOnHover.IsActive="True" Background="White" Grid.Column="0" HorizontalAlignment="Stretch" Margin="0" Grid.Row="1">
            <Expander Name="ExpanderPlaylist" ExpandDirection="Right">
                <Expander.Header>
                    <StackPanel Orientation="Vertical">
                        <CheckBox Padding="0" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" VerticalAlignment="Top" Margin="0,3" Focusable="False" Style="{StaticResource {x:Static ToolBar.CheckBoxStyleKey}}" Width="24" Height="24" HorizontalAlignment="Center"
                              IsChecked="{Binding ElementName=GridPlaylist, Path=(shared:HideOnHover.IsActive), Mode=TwoWay, Converter={StaticResource Inverter}}">
                            <TextBlock Text="🖈" Padding="0" Margin="0" FontSize="18"/>
                        </CheckBox>
                        <TextBlock TextAlignment="Center" VerticalAlignment="Top" Text="Playlist" FontSize="20" Margin="0,3">
                            <TextBlock.LayoutTransform>
                                <RotateTransform Angle="-90"/>
                            </TextBlock.LayoutTransform>
                        </TextBlock>
                    </StackPanel>
                </Expander.Header>
                <Grid Name="GirdPlaylistInner" MinWidth="150" MaxWidth="500">
                    <DockPanel LastChildFill="True">
                        <controls1:HorizontalStretcher StretchedParent="{Binding ElementName=GirdPlaylistInner}" DockPanel.Dock="Right" HorizontalAlignment="Right" FinishedDragging="SidePanel_FinishedDragging"/>
                        <controls1:PlaylistControl ViewModel="{Binding Path=.}" Margin="0" />
                    </DockPanel>
                </Grid>
            </Expander>
        </Grid>

        <Grid Name="GridSettings" shared:HideOnHover.IsActive="True" Background="White" Grid.Column="2" HorizontalAlignment="Stretch" Margin="0" Grid.Row="1" VerticalAlignment="Stretch" >
            <Expander Name="ExpanderSettings" ExpandDirection="Left" Width="Auto">
                <Expander.Header>
                    <StackPanel Orientation="Vertical">
                        <CheckBox Padding="0" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" VerticalAlignment="Top" Margin="0,3" Focusable="False" Style="{StaticResource {x:Static ToolBar.CheckBoxStyleKey}}" Width="24" Height="24" HorizontalAlignment="Center"
                                  IsChecked="{Binding ElementName=GridSettings, Path=(shared:HideOnHover.IsActive), Mode=TwoWay, Converter={StaticResource Inverter}}">
                            <TextBlock Text="🖈" Padding="0" Margin="0" FontSize="18"/>
                        </CheckBox>
                        <TextBlock TextAlignment="Center" VerticalAlignment="Top" HorizontalAlignment="Center" Text="Settings" FontSize="20" Margin="0,3">
                            <TextBlock.LayoutTransform>
                                <RotateTransform Angle="-90"/>
                            </TextBlock.LayoutTransform>
                        </TextBlock>
                    </StackPanel>
                </Expander.Header>

                <Grid Name="GridSettingsInner" Width="180" MaxWidth="400" MinWidth="150">
                    <DockPanel LastChildFill="True">
                        <controls1:HorizontalStretcher StretchedParent="{Binding ElementName=GridSettingsInner}" DockPanel.Dock="Left" HorizontalAlignment="Left" FinishedDragging="SidePanel_FinishedDragging"/>
                        <ScrollViewer Style="{StaticResource LeftScrollViewer}"  VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" Margin="0">
                            <Grid>
                                <StackPanel>
                                    <StackPanel Margin="4" ToolTip="Timespan by which every script command will be delayed. Negative values will cause the commands to be executed ahead of time.">
                                        <TextBlock TextAlignment="Center" Margin="0" Text="Script Delay"/>
                                        <Slider Value="{Binding Path=Settings.ScriptDelay, Converter={StaticResource MillisecondsConverter}}" Margin="0,4" Minimum="-2500" Maximum="2500" SmallChange="25" LargeChange="100" IsSnapToTickEnabled="True" TickFrequency="25"/>
                                        <TextBlock TextAlignment="Center" Margin="0" Text="{Binding Path=Settings.ScriptDelay, Converter={StaticResource MillisecondsConverter}, StringFormat={}{0:f0} ms}"/>
                                    </StackPanel>
                                    <StackPanel Margin="4">
                                        <TextBlock TextAlignment="Center" Margin="0" Text="Audio Delay"/>
                                        <Slider Value="{Binding Path=Settings.AudioDelay, Converter={StaticResource MillisecondsConverter}}" Margin="0,4" Minimum="-2500" Maximum="2500" SmallChange="25" LargeChange="100" IsSnapToTickEnabled="True" TickFrequency="25"/>
                                        <TextBlock TextAlignment="Center" Margin="0" Text="{Binding Path=Settings.AudioDelay, Converter={StaticResource MillisecondsConverter}, StringFormat={}{0:f0} ms}"/>
                                    </StackPanel>
                                    <Separator/>
                                    <StackPanel Margin="4" ToolTip="Minimum and maximum position of the Launch. Values received from the script will be scaled accordingly.">
                                        <TextBlock Margin="0" HorizontalAlignment="Center" Text="Range"/>
                                        <shared:RangeSlider Margin="0,4" Minimum="0" Maximum="99" LowerValue="{Binding Settings.MinPosition, Mode=TwoWay}" UpperValue="{Binding Settings.MaxPosition, Mode=TwoWay}"/>
                                        <DockPanel LastChildFill="False">
                                            <TextBlock Margin="4,0" Text="{Binding Settings.MinPosition}" DockPanel.Dock="Left"/>
                                            <TextBlock Margin="4,0" Text="{Binding Settings.MaxPosition}" DockPanel.Dock="Right"/>
                                        </DockPanel>
                                        <TextBlock>The Handy Stroke Length</TextBlock>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Button Margin="2" HorizontalAlignment="Stretch" Grid.Column="0" Content="-" Command="{Binding DecreaseHandyStrokeLengthCommand}"/>
                                            <Button Margin="2" HorizontalAlignment="Stretch" Grid.Column="1" Content="+" Command="{Binding IncreaseHandyStrokeLengthCommand}"/>
                                        </Grid>
                                        <CheckBox Margin="4" Content="Invert Positions" IsChecked="{Binding Settings.InvertPosition}"/>
                                        <CheckBox Margin="4" Content="Enable Auto Homing" IsChecked="{Binding Settings.AutoHomingEnabled}"/>


                                        <TextBlock Margin="0" HorizontalAlignment="Center" Text="Range Extender"/>
                                        <Slider Margin="0,4" Minimum="0" Maximum="99" Value="{Binding Settings.RangeExtender}"/>
                                        <TextBlock TextAlignment="Center" Margin="0" Text="{Binding Path=Settings.RangeExtender}"/>
                                        <Grid>
                                            <Grid.Resources>
                                                <Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Static ToolBar.RadioButtonStyleKey}}">
                                                    <Setter Property="HorizontalAlignment" Value="Stretch"></Setter>
                                                </Style>
                                            </Grid.Resources>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <RadioButton Grid.Column="0" HorizontalAlignment="Stretch" IsChecked="{Binding Path=Settings.FilterMode, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PositionFilterMode.FullRange}}" Content="F" ToolTip="Full Range" />
                                            <RadioButton Grid.Column="1" HorizontalAlignment="Stretch" IsChecked="{Binding Path=Settings.FilterMode, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PositionFilterMode.Top}}" Content="T" ToolTip="Top" />
                                            <RadioButton Grid.Column="2" HorizontalAlignment="Stretch" IsChecked="{Binding Path=Settings.FilterMode, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PositionFilterMode.Middle}}" Content="M" ToolTip="Middle" />
                                            <RadioButton Grid.Column="3" HorizontalAlignment="Stretch" IsChecked="{Binding Path=Settings.FilterMode, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PositionFilterMode.Bottom}}" Content="B" ToolTip="Bottom" />
                                            <RadioButton Grid.Column="4" HorizontalAlignment="Stretch" IsChecked="{Binding Path=Settings.FilterMode, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PositionFilterMode.SineWave}}" Content="S" ToolTip="Sine Wave" />
                                            <RadioButton Grid.Column="5" HorizontalAlignment="Stretch" IsChecked="{Binding Path=Settings.FilterMode, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PositionFilterMode.TopBottom}}" Content="TB" ToolTip="Top / Bottom" />
                                        </Grid>
                                        <Slider Margin="0,4" Minimum="0.1" Maximum="0.9" Value="{Binding Settings.FilterRange}" ToolTip="Filter Range"/>
                                        <TextBlock Margin="4,0" Text="{Binding Settings.FilterRange, StringFormat={}{0:p0}}" HorizontalAlignment="Stretch" TextAlignment="Center"/>
                                        <shared:RangePreview Ranges="{Binding FilterRanges}" HorizontalAlignment="Stretch" Height="80"/>
                                    </StackPanel>
                                    <Separator/>
                                    <StackPanel Margin="4" ToolTip="Minimum and maximum speed of the Launch.">
                                        <TextBlock Margin="0" HorizontalAlignment="Center" Text="Speed"/>
                                        <shared:RangeSlider Margin="0,4" Minimum="0" Maximum="99" LowerValue="{Binding Settings.MinSpeed, Mode=TwoWay}" UpperValue="{Binding Settings.MaxSpeed, Mode=TwoWay}"/>
                                        <DockPanel LastChildFill="False">
                                            <TextBlock Margin="4,0" Text="{Binding Settings.MinSpeed}" DockPanel.Dock="Left"/>
                                            <TextBlock Margin="4,0" Text="{Binding Settings.MaxSpeed}" DockPanel.Dock="Right"/>
                                        </DockPanel>
                                    </StackPanel>

                                    <StackPanel Margin="4" ToolTip="Static multiplier that is applied after the automatic speed detection.">
                                        <TextBlock Margin="0" Text="Speed Multiplier" TextAlignment="Center"/>
                                        <Slider Margin="0,4" Minimum="0.1" Maximum="5.0" Value="{Binding Settings.SpeedMultiplier}"  IsSnapToTickEnabled="True" TickFrequency="0.1"/>
                                        <TextBlock Margin="0" Text="{Binding Settings.SpeedMultiplier, StringFormat={}x{0:f1}}" TextAlignment="Center"/>
                                    </StackPanel>

                                    <StackPanel Margin="4" ToolTip="Playback Rate">
                                        <TextBlock Margin="0" Text="Playback Rate" TextAlignment="Center"/>
                                        <Slider Margin="0,4" Minimum="0.1" Maximum="2.0" Value="{Binding TimeSource.PlaybackRate}" IsSnapToTickEnabled="True" TickFrequency="0.1"/>
                                        <TextBlock Margin="0" Text="{Binding TimeSource.PlaybackRate, StringFormat={}x{0:f1}}" TextAlignment="Center"/>
                                    </StackPanel>

                                    <Separator/>

                                    <StackPanel Margin="4" ToolTip="Minimal delay between two script commands">
                                        <TextBlock Margin="0" Text="Min Command Delay" TextAlignment="Center"/>
                                        <Slider LargeChange="5" Margin="0,4" Minimum="1" Maximum="250"  Value="{Binding Path=Settings.CommandDelay, Converter={StaticResource MillisecondsConverter}}"  SmallChange="1"  IsSnapToTickEnabled="True" TickFrequency="1"/>
                                        <TextBlock Margin="0" Text="{Binding Path=Settings.CommandDelay, Converter={StaticResource MillisecondsConverter}, StringFormat={}{0:f0} ms}" TextAlignment="Center"/>
                                    </StackPanel>

                                    <StackPanel Margin="4" ToolTip="Will automatically skip command gaps of more than 10s.">
                                        <CheckBox IsChecked="{Binding Settings.AutoSkip}" Content="Auto-Skip Gaps"/>
                                    </StackPanel>

                                    <StackPanel Margin="4" ToolTip="Determines how beat files are converted to movements">
                                        <TextBlock Margin="0" Text="Beat Conversion Mode" TextAlignment="Center"/>
                                        <ComboBox ItemsSource="{Binding ConversionModes}" SelectedItem="{Binding Settings.ConversionMode}">
                                            <ComboBox.ItemTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding Converter={StaticResource ConversionConverter}}"/>
                                                </DataTemplate>
                                            </ComboBox.ItemTemplate>
                                        </ComboBox>
                                    </StackPanel>

                                    <Separator/>

                                    <StackPanel ToolTip="Defines the command source">
                                        <StackPanel.Resources>
                                            <Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Static ToolBar.RadioButtonStyleKey}}">
                                                <Setter Property="HorizontalAlignment" Value="Stretch"></Setter>
                                            </Style>
                                        </StackPanel.Resources>
                                        <TextBlock Margin="4,8,4,4" HorizontalAlignment="Center" Text="Source" FontSize="20"/>

                                        <RadioButton IsChecked="{Binding Path=CommandSource, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static scriptPlayer:CommandSource.Video}}" Content="Video" />
                                        <RadioButton IsChecked="{Binding Path=CommandSource, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static scriptPlayer:CommandSource.None}}" Content="None" />
                                        <RadioButton IsChecked="{Binding Path=CommandSource, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static scriptPlayer:CommandSource.Random}}" Content="Random" />
                                        <RadioButton IsChecked="{Binding Path=CommandSource, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static scriptPlayer:CommandSource.Pattern}}" Content="Pattern" />

                                        <ComboBox ItemsSource="{Binding Patterns}" SelectedItem="{Binding SelectedPattern}" DisplayMemberPath="Name" Margin="4" />
                                        <TextBlock Margin="0" Text="Pattern Speed" TextAlignment="Center"/>
                                        <Slider LargeChange="10" Margin="0,4" Minimum="100" Maximum="1000"  Value="{Binding Path=Settings.PatternSpeed, Converter={StaticResource MillisecondsConverter}}"  SmallChange="10"  IsSnapToTickEnabled="True" TickFrequency="10"/>
                                        <TextBlock Margin="0" Text="{Binding Path=Settings.PatternSpeed, Converter={StaticResource MillisecondsConverter}, StringFormat={}{0:f0} ms}" TextAlignment="Center"/>
                                    </StackPanel>

                                    <Separator/>

                                    <TextBlock Margin="4,8,4,4" HorizontalAlignment="Center" Text="Debug" FontSize="20"/>
                                    <Button Command="{Binding ReloadScriptCommand}">Reload Script</Button>
                                    <CheckBox Margin="4" IsChecked="{Binding Settings.AutoReloadScript}">Auto Reload Script</CheckBox>
                                    <CheckBox Margin="4" IsChecked="{Binding Settings.ShowHeatMap}">Show Heat Map</CheckBox>
                                    <CheckBox Margin="4" IsChecked="{Binding Settings.ShowScriptPositions}">Show Script Positions</CheckBox>
                                    <TextBlock Margin="4" Text="Test Patterns"/>
                                    <ComboBox ItemsSource="{Binding TestPatterns}" SelectedItem="{Binding SelectedTestPattern}" DisplayMemberPath="Name" Margin="4" />
                                    <Button Command="{Binding ExecuteSelectedTestPatternCommand}" Margin="4,0,4,4" Content="Execute Pattern" VerticalAlignment="Top"/>
                                    <CheckBox IsChecked="{Binding Settings.LogMarkers}" Margin="4" Content="Log Markers"/>
                                    <CheckBox IsChecked="{Binding BlurVideo}" Margin="4" Content="Blur Video"/>
                                    <CheckBox IsChecked="{Binding Settings.CropVideo}" Margin="4" Content="Crop Video"/>
                                </StackPanel>
                            </Grid>
                        </ScrollViewer>
                    </DockPanel>
                </Grid>
            </Expander>
        </Grid>
    </Grid>
</Window>